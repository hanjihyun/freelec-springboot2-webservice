buildscript {
//  ext ->  build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
    ext {
        springBootVersion = '2.1.9.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
//        spring-boot-gradle-plugin 는 스프링 부트 그레이들 플러그인의 2.1.9.RELEASE를 의존성으로 받겠다는 의미
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

//플러그인 의존성들을 적용할 것인지를 결정하는 코드
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//io.spring.dependency-management 플러그인은 스프링 부트의 의존성들을 관리해 주는 플러그인이라 꼭 추가해야된다!
//위 플러그인은 자바와 스프링 부트를 사용하기 위한 필수 플러그인 항상 추가!!

group 'com.jojoldu.book'
version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

//repositoriessns 각종 의존성들을 어떤 원격 저장소에서 받을지 정한다
repositories{
//    라이브러리 업로드를 위해 많은 과정과 설정 필요
    mavenCentral()
//    라이브러리 업로드 간단
//    jcenter에 라이브러리를 업로드하면 mavenCentral에도 업로드 될 수 있도록 자동화 할 수 있다
    jcenter()
}
//dependencies는 프로젝트에 개발에 필요한 의존성을 선언하는 곳
dependencies {
//    자동완성 가능 -> compile 메소드 안에 라이브러리의 이름의 앞부분만 추가
//    특정 버전을 명시하면 안된다 그래야 위 "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" 버전을 따라감
    compile('org.springframework.boot:spring-boot-starter-web')
//  스프링부트용 Spring Data Jpa 추상화 라이브러리
    //JPA 관련 라이브러리 버전 관리
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //h2 : 인메모리 관계형 데이터베이스
    //  :의존성만으로 관리할 수 있다.
    //  : 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화 된다는 점을 이용하여 테스트 용도로 많이 사용
    // : 여기선 JPA의 테스트, 로컬 환경에서의 구동에서 사용할 예정
    compile('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}